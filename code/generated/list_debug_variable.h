// Generated by Codegen
#ifndef LIST_DEBUG_VARIABLE
#define LIST_DEBUG_VARIABLE
// list_debug_variable = list name
// array_debug_variable = array name
// debug_variable = type name
// ListDebugVariable_ = function prefix



// NOTE(Momo): Requires you to #include the definition of array_debug_variable before this
struct list_debug_variable : array_debug_variable {
    u32 Capacity; // Total number of borrowable objects.
};

// Constructors
static inline list_debug_variable
ListDebugVariable_CreateFromMemory(ListDebugVariable_* Arr, u32 Capacity) {
    list_debug_variable Ret = {};
    Ret.E = Arr;
    Ret.Capacity= Capacity;
    return Ret;
}

static inline list_debug_variable
ListDebugVariable_CreateFromArena(arena* Arena, u32 Capacity) {
    list_debug_variable Ret = {};
    Ret.E = Arena_PushArray(ListDebugVariable_, Arena, Capacity);
    Ret.Capacity = Capacity;
    return Ret;
}


static inline void 
ListDebugVariable_Clear(list_debug_variable* List) {
    List->Count = 0;
}

static inline void
ListDebugVariable_Copy(list_debug_variable* Dest, array_debug_variable* Src) {
    Assert(Src->Count <= Dest->Capacity);
    for (u32 I = 0; I < Src->Count; ++I ) {
        Dest->E[I] = Src->E[I];
    }
    Dest->Count = Src->Count;
}


static inline u32
ListDebugVariable_Remaining(list_debug_variable* List) {
    return List->Capacity - List->Count;
}

static inline b32
ListDebugVariable_Push(list_debug_variable* List, ListDebugVariable_ Obj) {
    if(List->Count >= List->Capacity) {
		return false;
	}
    List->E[List->Count++] = Obj;
	return true;
}

static inline b32
ListDebugVariable_PushArray(list_debug_variable* Dest, array_debug_variable Src) {
    if(Dest->Count + Src.Count > Dest->Capacity) {
		return false;
	}
    for ( u32 i = 0; i < Src.Count; ++i ) {
        Dest->E[Dest->Count++] = Src.E[i];
    }
	return true;
}


static inline void
ListDebugVariable_Pop(list_debug_variable* List) {
    Assert(List->Count > 0);
    --List->Count;
}

static inline ListDebugVariable_*
ListDebugVariable_Front(list_debug_variable* List) {
    Assert(List->Count > 0);
    return List->E;
}

static inline ListDebugVariable_*
ListDebugVariable_Back(list_debug_variable* List) {
    Assert(List->Count > 0);
    return List->E + List->Count - 1;
}


static inline void
ListDebugVariable_Remove(list_debug_variable* List, u32 Index) {
    Assert(Index < List->Count);
    for (; Index < List->Count - 1; ++Index) {
        List->E[Index] = List->E[Index + 1];
    }
    --List->Count;
}

// Use this to remove objects if order does not matter!
static inline void
ListDebugVariable_SwapRemove(list_debug_variable* List, u32 Index) {
    //(*Obj) = List->E[List->Count - 1];
    List->E[Index] = List->E[List->Count - 1];
    --List->Count;
}



/*
static inline usize
ListDebugVariable_RemoveIf(list_debug_variable* List, unary_comparer UnaryComparer) {
    usize Index = Find(List, UnaryComparer);
    Remove(List, Index);
    return Index;
}

*/
#endif