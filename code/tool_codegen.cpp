#include <stdio.h>
#include <stdlib.h>

#include "momo.h"

struct code_snippet {
    const char* FileName;
    const char** Words;
    u32 WordCount;
    
};


// For now, we can only replace $0 to $9 in the input file.
// Should be more than enough for most use cases. 
//
// Expected usage: 
//  # replaces $0 and $1 with u32 and U32 respectively
//  const char* Words[] = { "u32", "U32" }; 
//  GenerateCode("template_array.cpp",   // input file 
//               "gen_tpl_array_u32.h",  // output file
//               Words,                  
//               ARRAY_COUNT(Words));
//              
static inline void
Codegen_GenerateCode(code_snippet* Snippets,
                     u32 SnippetCount,
                     const char* DestFileName,
                     const char* CodeGuard = 0)
{
    const char* Header = "// Generated by Codegen\n";
    
    FILE * DestFile = {};
    if(fopen_s(&DestFile, DestFileName, "w") != 0) {
        printf("Cannot open file: %s\n", DestFileName);
        return;
    }
    defer { fclose(DestFile); };
    printf("Working on %s\n", DestFileName);  
    
    fwrite(Header, 1, cstr_length(Header), DestFile);
    
    if (CodeGuard != 0) {
        const char* Ifndef = "#ifndef ";
        const char* Define = "#define ";
        
        fwrite(Ifndef, 1, cstr_length(Ifndef), DestFile);
        fwrite(CodeGuard, 1, cstr_length(CodeGuard), DestFile);
        fwrite("\n", 1, cstr_length("\n"), DestFile);
        fwrite(Define, 1, cstr_length(Define), DestFile);
        fwrite(CodeGuard, 1, cstr_length(CodeGuard), DestFile);
        fwrite("\n", 1, cstr_length("\n"), DestFile);
    }
    
    for (u32 SnippetIndex = 0; SnippetIndex < SnippetCount; ++SnippetIndex) {
        code_snippet Snippet = Snippets[SnippetIndex];
        ASSERT(Snippet.WordCount <= 10);
        FILE* SrcFile = {};
        if (fopen_s(&SrcFile, Snippet.FileName, "r") != 0) {
            printf("Cannot find file: %s\n", Snippet.FileName);
            return;
        }
        defer { fclose(SrcFile); }; 
        
        while (!feof(SrcFile)) {
            char CurrentChar = 0;
            fread(&CurrentChar, 1, 1, SrcFile); 
            
            if (CurrentChar == '$') {
                char WordIndex = 0;
                if (fread(&WordIndex, 1, 1, SrcFile)) {
                    WordIndex -= '0';
                    if (WordIndex > 9) {
                        printf("Invalid WordIndex: %d\n", WordIndex);
                        return;
                    }
                    ASSERT((u32)WordIndex < Snippet.WordCount);
                    const char* Word = Snippet.Words[WordIndex];
                    fwrite(Word, 1, cstr_length(Word), DestFile); 
                }
                else {
                    fwrite(&CurrentChar, 1, 1, DestFile);
                }
            } else if (CurrentChar == 0) {
                // Do nothing
            }else {
                fwrite(&CurrentChar, 1, 1, DestFile);
            }
            
        }
    }
    
    
    if (CodeGuard != 0) {
        const char* Endif = "#endif";
        fwrite(Endif, 1, cstr_length(Endif), DestFile);
    }
    
    
}


#if 0
// NOTE(Momo): This is if we want to export the exe as if it's a tool
const char* Help = "Expected usage:\n\
\t$ tool_codegen <input_file> <output_file> <$1_replacement> <$2_replacement>...\n";

int main(int argc, const char* argv[]) {
    if (argc <= 3) {
        printf("%s", Help);
        return 0;
    }
    
    u32 WordCount = argc - 3; 
    
    Codeen_GenerateCode(argv[1], 
                        argv[2], 
                        &argv[3], 
                        WordCount); 
    return 0;
}

#else

#define TemplateFile(FileName) "../code/templates/"##FileName
#define OutputFile(FileName) "../code/generated/"##FileName

int main(int argc, const char* argv[]) {
    const char* TplArray = TemplateFile("array");
    const char* TplList = TemplateFile("list");
    // GLuint array and list
    {
        code_snippet Snippet = {};
        Snippet.FileName = TplArray;
        const char* ArrArgs[] = { 
            "array_gluint", 
            "GLuint", 
            "ArrayGLuint_"
        };
        Snippet.Words = ArrArgs;
        Snippet.WordCount = ARRAY_COUNT(ArrArgs);
        Codegen_GenerateCode(&Snippet, 1, OutputFile("array_gluint.h"), "ARRAY_GLUINT");
        
        
        Snippet.FileName = TplList;
        const char* ListArgs[] = { 
            "list_gluint", 
            "array_gluint", 
            "GLuint", 
            "ListGLuint_"
        };
        Snippet.Words = ListArgs;
        Snippet.WordCount = ARRAY_COUNT(ListArgs);
        
        Codegen_GenerateCode(&Snippet, 1, OutputFile("list_gluint.h"), "LIST_GLUINT");
        
    }
    
    // debug_console_commands
    {
        code_snippet Snippet = {};
        Snippet.FileName = TplArray;
        const char* ArrArgs[] = { 
            "array_debug_console_command", 
            "debug_console_command", 
            "ArrayDebugConsoleCommand_"
        };
        Snippet.Words = ArrArgs;
        Snippet.WordCount = ARRAY_COUNT(ArrArgs);
        
        Codegen_GenerateCode(&Snippet, 1, OutputFile("array_debug_console_command.h"), "ARRAY_DEBUG_CONSOLE_COMMAND");
        
        Snippet.FileName = TplList;
        const char* ListArgs[] = { 
            "list_debug_console_command", 
            "array_debug_console_command", 
            "debug_console_command", 
            "ListDebugConsoleCommand_"
        };
        Snippet.Words = ListArgs;
        Snippet.WordCount = ARRAY_COUNT(ListArgs);
        Codegen_GenerateCode(&Snippet, 1, OutputFile("list_debug_console_command.h"), "LIST_DEBUG_CONSOLE_COMMAND");
        
    }
    
    // debug_console_string
    {
        code_snippet Snippet = {};
        Snippet.FileName = TplArray;
        const char* ArrArgs[] = { 
            "array_debug_console_string", 
            "debug_console_string", 
            "ArrayDebugConsoleString_"
        };
        Snippet.Words = ArrArgs;
        Snippet.WordCount = ARRAY_COUNT(ArrArgs);
        
        Codegen_GenerateCode(&Snippet, 1, OutputFile("array_debug_console_string.h"), "ARRAY_DEBUG_CONSOLE_STRING");
        
        
    }
    
    // debug_debug_variable
    {
        code_snippet Snippet = {};
        Snippet.FileName = TplArray;
        const char* ArrArgs[] = { 
            "array_debug_variable", 
            "debug_variable", 
            "ArrayDebugVariable_"
        };
        Snippet.Words = ArrArgs;
        Snippet.WordCount = ARRAY_COUNT(ArrArgs);
        Codegen_GenerateCode(&Snippet, 1, OutputFile("array_debug_variable.h"), "ARRAY_DEBUG_VARIABLE");
        
        Snippet.FileName = TplList;
        const char* ListArgs[] = { 
            "list_debug_variable", 
            "array_debug_variable", 
            "debug_variable", 
            "ListDebugVariable_"
        };
        Snippet.Words = ListArgs;
        Snippet.WordCount = ARRAY_COUNT(ListArgs);
        Codegen_GenerateCode(&Snippet, 1, OutputFile("list_debug_variable.h"), "LIST_DEBUG_VARIABLE");
        
        
    }
    
    // bullet
    {
        code_snippet Snippet = {};
        Snippet.FileName = TplArray;
        const char* ArrArgs[] = { 
            "array_bullet", 
            "bullet", 
            "ArrayBullet_"
        };
        Snippet.Words = ArrArgs;
        Snippet.WordCount = ARRAY_COUNT(ArrArgs);
        Codegen_GenerateCode(&Snippet, 1, OutputFile("array_bullet.h"), "ARRAY_BULLET");
        
        Snippet.FileName = TplList;
        const char* ListArgs[] = { 
            "list_bullet", 
            "array_bullet", 
            "bullet", 
            "ListBullet_"
        };
        Snippet.Words = ListArgs;
        Snippet.WordCount = ARRAY_COUNT(ListArgs);
        Codegen_GenerateCode(&Snippet, 1, OutputFile("list_bullet.h"), "LIST_BULLET");
        
    }
    
    // enemy
    {
        code_snippet Snippet = {};
        Snippet.FileName = TplArray;
        const char* ArrArgs[] = { 
            "array_enemy", 
            "enemy", 
            "ArrayEnemy_"};
        Snippet.Words = ArrArgs;
        Snippet.WordCount = ARRAY_COUNT(ArrArgs);
        Codegen_GenerateCode(&Snippet, 1, OutputFile("array_enemy.h"), "ARRAY_ENEMY");
        
        
        Snippet.FileName = TplList;
        const char* ListArgs[] = { 
            "list_enemy", 
            "array_enemy", 
            "enemy", 
            "ListEnemy_"
        };
        Snippet.Words = ListArgs;
        Snippet.WordCount = ARRAY_COUNT(ListArgs);
        
        Codegen_GenerateCode(&Snippet, 1, OutputFile("list_enemy.h"), "LIST_ENEMY");
        
    }
    printf("Done!\n");
    return 0;
}
#endif
